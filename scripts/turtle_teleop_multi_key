#!/usr/bin/env python
#linear drive(translation)

from __future__ import print_function
import rospy
import sys, select, os, time
from datetime import datetime
from geometry_msgs.msg import Twist
from pattern import Pattern
if os.name == 'nt':
  import msvcrt, time
else:
  import tty, termios



def getKey():
    if os.name == 'nt':
        timeout = 0.1
        startTime = time.time()
        while(1):
            if msvcrt.kbhit():
                if sys.version_info[0] >= 3:
                    return msvcrt.getch().decode()
                else:
                    return msvcrt.getch()
            elif time.time() - startTime > timeout:
                return ''

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

class Pattern :
    def __init__(self, initialTime):
        self.rate = 10   # 0.1second
        self.ready = True

        self.currentTime = rospy.Time.now()
        self.Time = self.currentTime - initialTime

    def linear(self, val):  # ratio: 0 ~ 100
        return (val/100.00) * MAXLIN
    
    def angular(self, val): # ratio: 0 ~ 100 
        return (val/100.00) * MAXANG

    def apply_vel(self, twist, linear, angular, types):
            
        twist.linear.x = linear if types is "linear" else 0.0
        twist.linear.y = 0.0
        twist.linear.z = 0.0

        twist.angular.x = 0.0
        twist.angular.y = 0.0
        twist.angular.z = angular if types is "angular" else 0.0
        
        pub.publish(twist)

    def speed_set(self, twisted, ratio, STEP, typed):
        self.ratio = ratio
        self.type = typed
        subratio = int(abs(self.ratio)/30)

        # 00 ~ 29  -> STOP
        if subratio is 0: 
            for sub in range(5, 0, -1) :
                self.apply_vel(twisted, self.linear(0),
                                        self.angular(0), self.type)
                rospy.Rate(self.rate).sleep()
            print(datetime.now().strftime("%H:%M:%S.%f")," | ","LINEAR VELOCITY | %f | ANGULAR VELOCITY | %f |---STOP---" %(twist.linear.x, twist.angular.z))

         # 30 ~ 59
        elif subratio is 1: 
            for sub in range(subratio+1, 0, -1) :
                self.apply_vel(twisted, self.linear(self.ratio-sub*STEP),
                                        self.angular(self.ratio-sub*STEP), self.type)
                print(datetime.now().strftime("%H:%M:%S.%f")," | ","LINEAR VELOCITY | %f | ANGULAR VELOCITY | %f |" %(twist.linear.x, twist.angular.z))
                rospy.Rate(self.rate).sleep()

         # 60 ~ 89
        elif subratio is 2: 
            for sub in range(subratio+1, -1, -1) :
                self.apply_vel(twisted, self.linear(self.ratio-sub*STEP),
                                        self.angular(self.ratio-sub*STEP), self.type)
                print(datetime.now().strftime("%H:%M:%S.%f")," | ","LINEAR VELOCITY | %f | ANGULAR VELOCITY | %f |" %(twist.linear.x, twist.angular.z))
                rospy.Rate(self.rate).sleep()


         # 90 ~ 100
        elif subratio is 3: 
            for sub in range(subratio, -1, -1) :
                self.apply_vel(twisted, self.linear(self.ratio-sub*STEP),
                                        self.angular(self.ratio-sub*STEP), self.type)
                print(datetime.now().strftime("%H:%M:%S.%f")," | ","LINEAR VELOCITY | %f | ANGULAR VELOCITY | %f | " %(twist.linear.x, twist.angular.z))
                rospy.Rate(self.rate).sleep()


        # Over 100 -> STOP
        else: 
            time.strftime('%c')
            for sub in range(5, 0, -1) :
                self.apply_vel(twisted, self.linear(0),
                                        self.angular(0), self.type)
                rospy.Rate(self.rate).sleep()
            print(datetime.now().strftime("%H:%M:%S.%f")," | ","LINEAR VELOCITY | %f | ANGULAR VELOCITY | %f | ---STOP---" %(twist.linear.x, twist.angular.z))


msg = """
[ICSL Turtlebot3 Velocity Control]
  Key Info				RunningTime		RATIO
    p : Pattern Start		  	u : 0.25		  j : 0.50
    w : Direct Step			  i : 0.50		  k : 0.75
    s : Reverse Step			  o : 0.75		  l : 1.00
    1 : Linear Mode			  [ : 1.00				
    2 : Angular Mode
-----------------------------------------------------
"""

MAXLIN = 0.22
MAXANG = 2.84

Index = 1
RATIO= 100          # Power Ratio : Manually, you can handle it with the ratio of 40 ~ 100
LOOP = 10            # Pattern Loop
STEP = 20           # Step of Ratio Size
RunningTime = 0.65 #0.4   # 1 : 1s / 0.5 : 2s / .. 0.25 4s 0.125 8 0.1 10
# 0.5 -> Linear 40mm / 0.3 -> Linear over 60mm
Type = ('linear', 'angular')

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    twist = Twist()
    rospy.init_node('turtlebot3_teleop')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=3)

    pattern =  Pattern(rospy.Time.now())
    print(msg)
    while not rospy.is_shutdown(): 
	infmsg = "[CHANGED] RATIO|%d|TIME|%.3f|" %(RATIO,RunningTime)
    	
	key = getKey()
	if key == 'w':
		pattern.speed_set(twist, RATIO, STEP, Type[Index]) # Direct move
		rospy.Rate(RunningTime).sleep()
		pattern.speed_set(twist, 0, STEP, Type[Index])
	#            rospy.Rate(1).sleep()    
	elif key == 's':
		pattern.speed_set(twist, -RATIO, -STEP, Type[Index]) # Reverse move
		rospy.Rate(RunningTime).sleep()
		pattern.speed_set(twist, 0, STEP, Type[Index])
	#            rospy.Rate(1).sleep()    
	elif key == 'p':
		for _ in range(LOOP):
			pattern.speed_set(twist, RATIO, STEP, Type[Index]) # Direct move
			rospy.Rate(RunningTime).sleep()
			pattern.speed_set(twist, 0, STEP, Type[Index])

			pattern.speed_set(twist, -RATIO, -STEP, Type[Index]) # Reverse move
			rospy.Rate(RunningTime).sleep()
			pattern.speed_set(twist, 0, STEP, Type[Index])

	elif key == '1':  # linear change
		Index = 0
		print('[CHANGED] to Linear Velocity test')
	elif key == '2':  # angular change
		Index = 1
		print('[CHANGED] to Angular Velocity test')            

	elif key == 'u':
		RunningTime = 0.25	
		print(infmsg)
	elif key == 'i':
		RunningTime = 0.50	
		print(infmsg) 
	elif key == 'o':
		RunningTime = 0.75	
		print(infmsg)
	elif key == '[':
		RunningTime = 1.00	
		print(infmsg)
	elif key == 'j':
		RATIO = 50	
		print(infmsg)
	elif key == 'k':
		RATIO = 75	
		print(infmsg)
	elif key == 'l':
		RATIO = 100	
		print(infmsg)
	else:
		if (key == '\x03'):
			break

	if os.name != 'nt':
		termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)



